import '../../yao/sass/index.scss';
import HashHistory from 'react-router/lib/HashHistory';
import React, { Component, PropTypes} from 'react';

import { Provider } from 'react-redux';
import { Router, Route } from 'react-router';

import Loader from '../../common/js/components/Loader.react'
import Alert from '../../common/js/components/Alert.react'
import Confirm from '../../common/js/components/Confirm.react'
import Popup from '../../common/js/components/Popup.react'

import Test from '../../yao/js/components/Test.react';
import Example from '../../yao/js/components/Example.react';
//import Home from '../../yao/js/components/Home.react';
import OrderInfo from '../../yao/js/components/OrderInfo.react';
import OrderList from '../../yao/js/components/OrderList.react';
import Search from '../../yao/js/components/Search.react';
import Detail from '../../yao/js/components/Detail.react';
import Category from '../../yao/js/components/Category.react';
import AddressList from '../../yao/js/components/AddressList.react';
import AddressDetail from '../../yao/js/components/AddressDetail.react';
import AddressLocation from '../../yao/js/components/AddressLocation.react';
import MedicationSuggestion from '../../yao/js/components/MedicationSuggestion.react';
import TransferPage from '../../yao/js/components/TransferPage.react';
import RegionSelect from '../../yao/js/components/RegionSelect.react';
import O2O from '../../yao/js/components/O2O.react';
import CategoryList from '../../yao/js/components/CategoryList.react';
import Cart from '../../yao/js/components/Cart.react';
import FillorderCard from '../../yao/js/components/FillorderCard.react';
import PaySuccess from '../../yao/js/components/PaySuccess.react';
import Chat from '../../yao/js/components/Chat.react';
import Recipes from '../../yao/js/components/Recipes.react';
import Subject from '../../yao/js/components/Subject.react';
import Logistics from '../../yao/js/components/Logistics.react';
import Lucky from '../../yao/js/components/Lucky.react';
import Login from '../../yao/js/components/Login.react';
import Fail from '../../yao/js/components/Fail.react';
import ChopProducts from '../../yao/js/components/ChopProducts.react';
import DuoJin from '../../yao/js/components/DuoJin.react';
import DuojinRule from '../../yao/js/components/DuojinRule.react';
import Home from '../../yao/js/components/ScHome.react';
import Positioning from '../../yao/js/components/Positioning.react';
import CityList from '../../yao/js/components/CityList.react';
import GISHelper from '../../yao/js/common/GISHelper';

import CartBubble from '../../yao/js/partial/CartBubble.react';

import store from './store';
import * as Actions from '../../yao/js/actions';
import bindActions from '../../yao/js/actions/bind';

import o2oHelper from '../../yao/js/common/o2oHelper';

import yaoCommon from '../../yao/js/common/common';

let flag = [];
// 从经纬度拿取的地址信息
let nativeAddress = null;
//根据IP地址获取的地址信息
let ipAddress = {};

class App extends Component {

  constructor(props) {
    super(props);
  }

  render() {
    // if (!this.state.isShow) return null;
    // Injected by React Router
    const { location, children } = this.props;
    const { pathname } = location;
    
    const value = pathname.split('/')[1] || 'yao-home';
    return (
      <div className={'page-' + value}>
        {children}
        <Loader />
        <Alert />
        <Confirm />
        <Popup />
        <CartBubble />
      </div>
    );
  }
}

function getCart() {
  bindActions.getCart('b2c');
  bindActions.getCart('o2o');
}

function onenter (nextState,transition){
  console.log(nextState);
  // TODO 如果后续有要登录的需求可以拿回来了这里先注释掉了,应为cdm要在onenter之后才调用
  //if(!yaoCommon.hadSignIn()){
    //transition.to('/yao-login',{
      //returnUrl: nextState.location.pathname
    //});
  //}
}
function onleave(){
  store.dispatch(CommonActions.hideAll());
}
class Root extends Component {
  render() {
    return (
      <Provider store={store}>
        {() =>
          <Router history={this.props.history}>
            <Route component={App}>
              <Route path='yao-test' component={Test}/>
              <Route path='yao-example' component={Example} />
              <Route path="/" component={Home}/>
              <Route path="yao-home" component={Home}/>
              <Route path="yao-orderlist" component={OrderList} onEnter = {onenter}/>
              <Route path="yao-orderinfo/:orderId" component={OrderInfo} onEnter = {onenter}/>
              <Route path="OrderInfo/:orderId" component={OrderInfo} onEnter = {onenter}/>
              <Route path="yao-search/:bizType" component={Search}/>
              <Route path="yao-detail/:productId(/:storeId)(/:showFooter)" component={Detail}  onLeave={onleave}/>
              <Route path="yao-search/:bizType/:keyword" component={Search}/>
              <Route path="detail/:productId" component={Detail}/>
              <Route path="yao-category/:bizType/:cateid" component={Category}/>
              <Route path="yao-addresslist(/:bizType)" component={AddressList} onEnter = {onenter}/>
              <Route path="yao-addressdetail(/:bizType)" component={AddressDetail} onEnter = {onenter}/>
              <Route path="yao-addresslocation(/:region)" component={AddressLocation} onEnter = {onenter}/>
              <Route path="yao-suggestion/:doctorid/:keywords" component={MedicationSuggestion} onEnter = {onenter}/>
              <Route path="yao-regionselect" component={RegionSelect}/>
              <Route path="yao-o2o" component={O2O} onEnter = {onenter}/>
              <Route path="yao-categorylist" component={CategoryList}/>
              <Route path="yao-cart/:type" component={Cart} onEnter = {onenter}/>
              <Route path="yao-chat/:msg_type/:role/:msg" component={Chat} onEnter = {onenter}/>
              <Route path="yao-chat/:msg_type/:role/" component={Chat} onEnter = {onenter}/>
              <Route path="yao-chat(/:role)" component={Chat} onEnter = {onenter}/>
              <Route path="yao-paysuccess/:orderId(&status=I)" component={PaySuccess} onEnter = {onenter}/>
              <Route path="yao-positioning" component={Positioning} onEnter = {onenter}/>
              <Route path="yao-cityList" component={CityList} onEnter = {onenter}/>
              <Route path="yao-recipes" component={Recipes} onEnter = {onenter}/>
              <Route path="recipes" component={Recipes} onEnter = {onenter}/>
              <Route path="yao-fillordercard/:type(/:param1(/:param2/:param3))" component={FillorderCard} onEnter = {onenter} onLeave={onleave}/>
              <Route path="activity/:activityId" component={Subject}/>
              <Route path="yao-logistics" component={Logistics} onEnter = {onenter}/>
              <Route path="yao-lucky" component={Lucky} onEnter = {onenter}/>
              <Route path="yao-login" component={Login}/>
              <Route path="yao-logistics/:orderId" component={Logistics} onEnter = {onenter}/>
              <Route path="yao-fail" component={Fail} />
              <Route path="ChopProducts/:chopId" component={ChopProducts}/>
              <Route path="duojin" component={DuoJin}/>
              <Route path="duojin-rule" component={DuojinRule}/>
              <Route path="yao-transfer" component={TransferPage}/>
            </Route>
          </Router>
        }

      </Provider>
    );
  }
}

React.initializeTouchEvents(true);

//get cf_token
(function () {
  let UrlArray = window.location.hash.split("#");
  //是否有哈希的哈希
  if (UrlArray.length > 2) {
    let CF_TOKEN = UrlArray[UrlArray.length-1];
    window.localStorage.setItem('CF_TOKEN', CF_TOKEN);
    //alert(1);
    //location.href = location.origin + location.pathname + location.search + "#/"
  }
})()


Util.deviceReady(function(){
  // 接管native返回按钮
  let page = window.location.hash.split('/')[1] || 'home';
  // home页面暂时不能接管，因为home的Webview没有action 9,7的方法
  // TODO 这里还需要判断么
  if(page !== 'home' && page !== 'yao-chat'){
      var success = function(){};
      var error = function(){};
      var options = {
          "action": 9,
          "type": 7,
          "data": {
            "catchBack": "yes"
          },
          "source": 1
      }
      pajkPostMessage(success, error, options);
  }
  // 获取渠道标识
	pajkPostMessage(function(data) {
		Util.setChannel(data);
	}, null, {
    action: 8,
    type: 4,
    data: {},
    source: 2
	});
});

// 如果从支付成功页返回，关闭webview
window.pajkGoBack = function(options) {
    let pathAllHistory = store.getState().global.pathAllHistory;
    // 如果当前url为入口url, 则关闭webview
    if ( window.location.hash.replace("#", "") === pathAllHistory[0]) {
        pajkPostMessage(null, null, {
          action: 8,
          type: 2,
          data: {},
          source: 1
        });
    } else {
        window.history.back();
    }
};

window.pajkOnMessage = Util.msgMgr.pajkOnMessage;
Util.msgMgr.setHandler( (options) => {
  // 重新显示webview时候重新拉购物车
  if (options && options.action === 1) {
    console.log('re show');
    getCart(); 
    getLocationFromNative();
  }
});

// 退出APP时放开劫持返回按钮
// ios里不起作用, 还是要单独写  
window.onbeforeunload = function() {
  yaoCommon.releaseWebview();
}

// 初次路径记录
recordPath();

// 记录访问路径
window.addEventListener('hashchange', () => {
  recordPath();
});

function recordPath() {
  if (window.location.hash.indexOf('/') !== -1) {
    let h = window.location.hash.replace("#", "");
    let fullPath = window.location.hash.split('#')[1];
    if(fullPath=="/")fullPath="/yao-home";
    store.dispatch(CommonActions.recordPathHistory(h));
    store.dispatch(Actions.recordPathHistoryPageId(fullPath));
  }
}

//获取APPNanme
store.dispatch(Actions.getAppName());
store.dispatch(Actions.getFrontConfig());

//获取所有文案
store.dispatch(Actions.getDocumentDoc('yao'));


// 获取用户信息
bindActions.getUserInfoV2().then(() => {
  let user = store.getState().yao_global.user || {};
  localStorage.setItem('USER_ID', user.id || 0);
  if (yaoCommon.hadSignIn()) {
    getCart();
    // 获取用户地址信息
    bindActions.AddressesList().then(() => {
      // 设置默认地址为当前选择地址
      let allAddress = store.getState().yao_address.yao_getAllAddresses || [];
      let defaultAddress = allAddress.find((element) => { 
        return element.isDefault; 
      });
      if (defaultAddress) {
        bindActions.selectAddress(defaultAddress);
      }
      setContent('addressSuccess');
    });
  } else {
    setContent('addressFail');
  }
  
  if (Global.SHOW_O2O.indexOf(Util.getAppName().toLowerCase()) !== -1) {
    // 从native获取地址
    getLocationFromNative();
    
    // 根据ip获取地址
    GISHelper.getCityByIp().then((data) => {
      if (data && data.content && data.content.address_detail) {
        let address = data.content.address_detail;
        ipAddress.city = address.city;
        ipAddress.province = address.province;
        setContent('ipSuccess');
      } else {
        Promise.reject('ipFail');
      }
    }).catch((message) => {
      setContent('ipFail');
    });
  } 
  React.render(
    <Root history={new HashHistory()} />,
    document.getElementById('app')
  );
});

function getLocationFromNative() {
  // 从native获取地址
  GISHelper.getNowLocation()
  .then((loc) => {
    return GISHelper.getAddressInfoByLonLat(loc.lon, loc.lat);
  }).then((data) => {
    let address = GISHelper.baiduMapHelper(data);
    if (address) {
      nativeAddress = address;
      setContent('gpsSuccess');
    } else {
      Promise.reject('gpsFail');
    }
  }).catch((message) => {
    setContent('gpsFail');
  });
}

function setContent(f) {
  flag.push(f);
  console.log(flag);
  let o2oCurrentAddress;

  // 如果有缓存地址,则直接使用
  if (yaoCommon.hasCachedO2oAddress()) {
    o2oCurrentAddress = yaoCommon.getO2oAddress();
  } else if (nativeAddress){
    o2oCurrentAddress = nativeAddress;
  } else {
    o2oCurrentAddress = ipAddress;
  }
  
  bindActions.setO2OAddress(o2oCurrentAddress);

  // 所有请求都完成了
  if (flag.length === 3) {

    // 如果不是o2o城市, 无缓存地址, 无 native地址, 则在首页弹框
    if (o2oHelper.iso2oCit(o2oCurrentAddress.city) && location.hash == '#/' && !nativeAddress && !yaoCommon.hasCachedO2oAddress()) {
      bindActions.showConfirm({
        content: '上海部分区域支持2小时送货服务,设置收获地址或开启定位服务,查看附近药房',
        confirmText: '设置地址',
        confirm: () => {
          Util.openNewPage('#/yao-positioning');
        },
        cancel: () => {
          bindActions.hideConfirm();
        }
      });
    }
  }
}
